# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ACME {
  id: ID!
  name: String!
  certificates: [Certificate!]!
  domains: [ACMEDomain!]!
  contactEmail: String!
  ACMEToken: String!
  acmeUserPermission: Permission!
}

type ACMEAccount {
  id: ID!
}

type ACMEDomain {
  id: ID!
  zone: Zone!
  domains: [String!]!
}

input ACMEDomainInput {
  zoneId: String!
  domains: [String!]!
}

input ACMEInput {
  name: String!
  email: String!
}

input ACMEUpdateInput {
  name: String
  email: String
  addDomains: [ACMEDomainInput!]
  removeDomains: [ID!]
}

type AuthResponse {
  token: String!
  currentUser: CurrentUser!
}

type Certificate {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  certificate: String!
  privateKey: String!
}

type Configuration {
  id: ID!
}

input CreateMXResourceRecordInput {
  host: String!
  ttl: Int
  preference: Int!
  value: String!
}

input CreateSRVResourceRecordInput {
  host: String!
  ttl: Int
  service: String!
  protocol: SRVProtocol!
  priority: Int!
  weight: Int!
  port: Int!
  target: String!
}

input CreateValueResourceRecordInput {
  type: ValueRecordType!
  ttl: Int
  host: String!
  value: String!
}

type CurrentUser {
  id: ID!
  username: String!
  email: String!
  roles: [UserRole!]!
  subscribers: [Subscriber!]!
  zones: [Zone!]!
  ACMEs: [ACME!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input EntityInput {
  entityType: EntityType!
  entityId: ID!
}

enum EntityType {
  TLS
  ZONE
}

input LoginInput {
  username: String!
  password: String!
}

type Mutation {
  createACME(input: ACMEInput!): CurrentUser!
  deleteACME(acmeId: String!): CurrentUser!
  updateACME(input: ACMEUpdateInput!, acmeId: String!): ACME!
  addACMEDomain(input: [ACMEDomainInput!]!, acmeId: String!): ACME!
  generateCertificate(acmeId: String!): ACME!
  revokeCertificate(certificateId: ID!): ACME!
  login(input: LoginInput!): AuthResponse!
  register(input: UserInput!): RegisterResponse!
  resetPasswordReset(input: RequestPasswordResetInput!): Boolean!
  initialConfiguration(user: UserInput!): Configuration!
  createValueResourceRecord(input: CreateValueResourceRecordInput!, zoneId: ID!): Zone!
  createMXResourceRecord(input: CreateMXResourceRecordInput!, zoneId: ID!): Zone!
  createSRVResourceRecord(input: CreateSRVResourceRecordInput!, zoneId: ID!): Zone!
  deleteResourceRecord(resourceRecordId: ID!): Zone!
  updateValueResourceRecord(input: ValueResourceRecordInput!, resourceRecordId: ID!): Zone!
  updateMXResourceRecord(input: MXResourceRecordInput!, resourceRecordId: ID!): Zone!
  updateSRVResourceRecord(input: SRVResourceRecordInput!, resourceRecordId: ID!): Zone!
  createSubscriber(input: SubscriberInput!): CurrentUser!
  deleteSubscriber(subscriberId: ID!): CurrentUser!
  addSubscriberUser(input: UserPermissionInput!, subscriberId: ID!): Subscriber!
  removeSubscriberUser(userId: ID!, subscriberId: ID!): Subscriber!
  addEntityToSubscriber(newEntities: [EntityInput!]!, subscriberId: ID!): Subscriber!
  removeEntityFromSubscriber(entityIds: [ID!]!, subscriberId: ID!): Subscriber!
  createSubscriberToken(subscriberId: ID!): String!
  addZoneUser(input: UserPermissionInput!, zoneId: ID!): Zone!
  removeZoneUser(zoneUserId: ID!, zoneId: ID!): Zone!
  createZone(input: ZoneInput!): Zone!
  deleteZone(zoneId: ID!): CurrentUser!
}

input MXResourceRecordInput {
  host: String
  ttl: Int
  preference: Int
  value: String
}

enum Permission {
  READ
  WRITE
  ADMIN
}

type Query {
  ACME(acmeId: String!): ACME!
  currentUser: CurrentUser
  hasSetup: Boolean!
  subscriber(subscriberId: ID!): Subscriber!
  getSubscribedEntities(subscriberToken: String!): [SubscriberEntity!]!
  users: [User!]!
  user(userId: String!): User!
  zones: [Zone!]!
  zone(zoneId: String!): Zone!
}

type RegisterResponse {
  success: Boolean!
  token: String!
  currentUser: CurrentUser!
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  password: String!
}

type ResourceRecord {
  id: ID!
  ttl: Int
  type: ResourceRecordType!
  host: String!

  """JSON Stringified data"""
  data: String!
}

input ResourceRecordFilter {
  host: String
  type: ResourceRecordType
}

enum ResourceRecordType {
  A
  NS
  TXT
  CNAME
  DNAME
  AAAA
  MX
  SRV
}

enum SRVProtocol {
  TCP
  UDP
  TLS
  LDAP
  HTTP
  OCSP
}

input SRVResourceRecordInput {
  host: String
  ttl: Int
  service: String
  protocol: SRVProtocol
  priority: Int
  weight: Int
  port: Int
  target: String
}

type Subscriber {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  accessPermissions: [SubscriberAccess!]!
  subscriberSettings: SubscriberSettings!
  userAccess: Permission!
  userPermissions: [Permission!]!
  subscribedEntities: [SubscriberEntity!]!
}

type SubscriberAccess {
  id: ID!
  user: User!
  accessPermissions: [Permission!]!
}

union SubscriberEntity = ACME | Zone

type SubscriberEventPayload {
  eventType: SubscriberPayloadType!
  id: ID!
  entity: SubscriberEntity!
}

input SubscriberInput {
  name: String!
}

enum SubscriberPayloadType {
  CREATE
  UPDATE
  DELETE
}

type SubscriberSettings {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Subscription {
  subscribe(subscriberToken: String!): SubscriberEventPayload!
}

type User {
  id: ID!
  username: String!
}

input UserInput {
  username: String!
  email: String!
  password: String!
}

input UserPermissionInput {
  userId: ID!
  accessPermission: Permission!
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

enum ValueRecordType {
  A
  NS
  CNAME
  DNAME
  AAAA
  TXT
}

input ValueResourceRecordInput {
  host: String
  ttl: Float
  value: String
}

type Zone {
  id: ID!
  updatedDate: DateTime!
  domainName: String!
  resourceRecords(filter: ResourceRecordFilter): [ResourceRecord!]!
  accessPermissions: [ZonePermissions!]!
  subscribers: [Subscriber!]!
  zoneSettings: ZoneSettings!
  userPermission: Permission!
  userPermissions: [Permission!]!
}

input ZoneInput {
  domainName: String!

  """The user requesting the zone"""
  zoneUserIds: [String!]!
  ns: String!
  contact: String!
}

type ZonePermissions {
  id: ID!
  user: User!
  accessPermissions: [Permission!]!
}

type ZoneSettings {
  id: ID!
  contact: String!
}
