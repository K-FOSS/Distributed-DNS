// Web/UI/Routes/AMEs/ACME/ACMECertificatesPanel.tsx
import React, { useMemo, useCallback } from 'react';
import { Certificate } from 'UI/GraphQL/graphqlTypes.gen';
import ExpansionPanel from '@material-ui/core/ExpansionPanel';
import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';
import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';
import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { Theme, createStyles, makeStyles } from '@material-ui/core/styles';
import { PaperSection } from 'UI/Components/Styles/Section/PaperSection';
import { BaseButton } from 'UI/Components/Styles/Button/BaseButton';
import forge, { pki } from 'node-forge';
import { useGenerateCertificateMutation } from './GenerateCertificate.gen';
import { useParams } from 'react-router';
import { useSnackbar } from 'notistack';
import { BaseList } from 'UI/Components/Styles/List/BaseList';
import { LabelListItem } from 'UI/Components/Styles/List/ListItems/LabelListItem';

forge.options.usePureJavaScript = true;

type CertificateData = Pick<Certificate, 'id' | 'createdAt' | 'certificate'>;

export interface ACMECertificatesPanelProps {
  certificates: CertificateData[] | undefined;
}

interface ACMEPageParams {
  acmeId: string;
}

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    root: {
      width: '100%',
    },
    certificateList: {
      margin: '1em',
    },
    heading: {
      fontSize: theme.typography.pxToRem(15),
      fontWeight: theme.typography.fontWeightRegular,
    },
    column: {
      flexBasis: '33.33%',
    },
    details: {
      alignItems: 'center',
    },
  }),
);

function CertificateItem(certificate: CertificateData): React.ReactElement {
  const classes = useStyles();
  const certificateInfo = useMemo(
    () => pki.certificateFromPem(certificate.certificate),
    [certificate.certificate],
  );

  const { altNames } = useMemo(
    () => certificateInfo.getExtension('subjectAltName'),
    [certificateInfo],
  ) as { altNames: { type: number; value: string }[] };

  console.log(altNames);

  return (
    <ExpansionPanel>
      <ExpansionPanelSummary
        expandIcon={<ExpandMoreIcon />}
        aria-controls='panel1a-content'
        id='panel1a-header'
      >
        <Typography className={classes.heading}>
          {certificate.createdAt}
        </Typography>
      </ExpansionPanelSummary>
      <ExpansionPanelDetails className={classes.details}>
        <BaseList subheader={{ title: 'Domains' }} className={classes.column}>
          {altNames.map(({ value }) => (
            <LabelListItem key={value} label={{ primary: value }} />
          ))}
        </BaseList>
        <div className={classes.column}>
        <Typography>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse
          malesuada lacus ex, sit amet blandit leo lobortis eget.
        </Typography>
        </div>

      </ExpansionPanelDetails>
      <ExpansionPanelActions>
        <BaseButton label='Cancel' size='small' />
        <BaseButton label='Save' size='small' color='primary' />
      </ExpansionPanelActions>
    </ExpansionPanel>
  );
}

export function ACMECertificatesPanel(
  props: ACMECertificatesPanelProps,
): React.ReactElement {
  const { acmeId } = useParams<ACMEPageParams>();
  const classes = useStyles();
  const { enqueueSnackbar } = useSnackbar();

  const [generateCertificate] = useGenerateCertificateMutation();

  const handleGenerateCertificate = useCallback(async () => {
    const response = await generateCertificate({
      variables: {
        acmeId,
      },
    });

    if (response.data?.generateCertificate)
      enqueueSnackbar('Successfully generated certificate', {
        variant: 'success',
      });
    else
      enqueueSnackbar('Error occured during certificate generation', {
        variant: 'error',
      });
  }, [acmeId, generateCertificate, enqueueSnackbar]);

  return (
    <>
      <PaperSection>
        <Typography variant='h4'>Certificates</Typography>

        <Typography variant='body1'>
          Certificates generated by Distributed DNS & Let&#39;s encrypt
        </Typography>
        <div className={classes.certificateList}>
          {(props.certificates || []).map((certificate) => (
            <CertificateItem key={certificate.id} {...certificate} />
          ))}
        </div>

        <BaseButton
          label='Generate Certificate'
          onClick={handleGenerateCertificate}
          color='primary'
          variant='contained'
        />
      </PaperSection>
    </>
  );
}
